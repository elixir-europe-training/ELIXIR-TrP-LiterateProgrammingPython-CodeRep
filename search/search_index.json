{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#elixir-lesson-title","title":"ELIXIR Lesson Title","text":""},{"location":"#authors","title":"Authors","text":"<p>Zeus</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Athena</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Poseidon</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Saad Arif</p> <p>  Saad Arif, Senior Lecturer, Dept. of BMS, Oxford Brookes University </p> <p>Greek Mythology icons made by max.icons from www.flaticon.com</p>"},{"location":"#lesson-overview","title":"Lesson overview","text":"<p> Description A course to introduce the theory, advantages and implementation of Literate Programming practices for python users working in JupyterNotebooks to enhance the students abilities to produce reproducible code.</p> <p></p> <p> Prerequisites To be able to follow this course, learners should have knowledge in: \u20031. Basic programming skills in Python  \u20032. A familiarity in using the interactive python notebooks like JupyterNotebooks  </p> <p></p> <p> Learning Outcomes: By the end of the course, learners will be able to: \u20031. Have an understanding of the principles and goals of Literate Programming (LP)  \u20032. Practically implement LP in their Python programs using Markdown in JupyterNotebooks  </p> <p></p> <p> Target Audience: Researchers, undergraduate students, postgraduate students, etc\u2026 </p> <p> Level: Beginner to Intermediate  </p> <p> License: Creative Commons Attribution 4.0 International License </p> <p> Funding: This project has received funding from [name of funders].  </p>"},{"location":"#contributors","title":"Contributors","text":"<p>Artemis</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Ares</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Nike</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Prometheus</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Perseus</p> <p>  Lorem ipsum dolor sit amet. </p> <p>Hercules</p> <p>  Lorem ipsum dolor sit amet. </p>"},{"location":"#citing-this-lesson","title":"Citing this lesson","text":"<p>Please cite as:</p> <ol> <li>Enter your citation here.</li> <li>Geert van Geest, Elin Kronander, Jose Alejandro Romero Herrera, Nadja \u017dlender, &amp; Alexia Cardona. (2023). The ELIXIR Training Lesson Template - Developing Training Together (v1.0.0-alpha). Zenodo. https://doi.org/10.5281/zenodo.7913092. </li> </ol>"},{"location":"#setup","title":"Setup","text":""},{"location":"#data-setup","title":"Data setup","text":"<p>To run this lesson you need to install data from \u2026</p>"},{"location":"#software-setup","title":"Software setup","text":"<p>To run this course you need to install\u2026 continue with software installation instructions</p>"},{"location":"course_schedule/","title":"Course schedule","text":"start end topic 10:00 10:30 coffee! 12:00 13:00 lunch! <p>Generate markdown tables at tablesgenerator.com</p>"},{"location":"follow_up_training/","title":"Follow up training","text":"<p>lorem ipsum</p>"},{"location":"keywords/","title":"Keywords","text":"<p>Here\u2019s a lit of used keywords:</p> <ol> <li> <p>Leyla Garcia, B\u00e9r\u00e9nice Batut, Melissa L. Burke, Mateusz Kuzak, Fotis Psomopoulos, Ricardo Arcila, Teresa K. Attwood, Niall Beard, Denise Carvalho-Silva, Alexandros C. Dimopoulos, Victoria Dominguez Del Angel, Michel Dumontier, Kim T. Gurwitz, Roland Krause, Peter McQuilton, Loredana Le Pera, Sarah L. Morgan, P\u00e4ivi Rauste, Allegra Via, Pascal Kahlem, Gabriella Rustici, Celia W.G. Van Gelder, and Patricia M. Palagi. Ten simple rules for making training materials FAIR. PLoS Computational Biology, 16(5):1\u20139, 2020. doi:10.1371/journal.pcbi.1007854.\u00a0\u21a9</p> </li> <li> <p>Nancy J Hoebelheinrich, Katarzyna Biernacka, Michelle Brazas, Leyla Jael Castro, Nicola Fiore, Margareta Hellstrom, Emma Lazzeri, Ellen Leenarts, Paula Maria Martinez Lavanchy, Elizabeth Newbold, Amy Nurnberger, Esther Plomp, Lucia Vaira, Celia W G van Gelder, and Angus Whyte. Recommendations for a minimal metadata set to aid harmonised discovery of learning resources. June 2022. URL: https://doi.org/10.15497/RDA00073, doi:10.15497/RDA00073.\u00a0\u21a9</p> </li> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.mkdocs\u00a0\u21a9</p> </li> </ol>"},{"location":"chapters/chapter_01/","title":"1. title of first chapter","text":""},{"location":"chapters/chapter_01/#11-first-subtopic","title":"1.1 First subtopic","text":"<p>Here you can enter text and create inline citations1 by using the bibtex plugin. Add your references in <code>references.bib</code>, and cite 2 by adding the @refid inside brackets like this <code>[@10.1093/bioinformatics/btt113]</code></p> <p>You can also embed videos from a local source (with a relative path) or from an url (like youtube). To use a youtube URL,  just attach the ID of the video to a youtube embedded video link: <code>https://youtube.com/embed/</code>. For example, the Elixir training video <code>https://youtu.be/oAD8FdGf8tI</code> has the ID <code>oAD8FdGf8tI</code>, so the final link would be:</p> <pre><code>![type:video](https://youtube.com/embed/oAD8FdGf8tI)\n</code></pre> <p></p>"},{"location":"chapters/chapter_01/#12-second-subtopic","title":"1.2 Second subtopic","text":"<p>Note</p> <p>Here you can put a note using admonitions.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>"},{"location":"chapters/chapter_01/#13-third-subtopic","title":"1.3 Third subtopic","text":"<ol> <li> <p>Leyla Garcia, B\u00e9r\u00e9nice Batut, Melissa L. Burke, Mateusz Kuzak, Fotis Psomopoulos, Ricardo Arcila, Teresa K. Attwood, Niall Beard, Denise Carvalho-Silva, Alexandros C. Dimopoulos, Victoria Dominguez Del Angel, Michel Dumontier, Kim T. Gurwitz, Roland Krause, Peter McQuilton, Loredana Le Pera, Sarah L. Morgan, P\u00e4ivi Rauste, Allegra Via, Pascal Kahlem, Gabriella Rustici, Celia W.G. Van Gelder, and Patricia M. Palagi. Ten simple rules for making training materials FAIR. PLoS Computational Biology, 16(5):1\u20139, 2020. doi:10.1371/journal.pcbi.1007854.\u00a0\u21a9</p> </li> <li> <p>Nancy J Hoebelheinrich, Katarzyna Biernacka, Michelle Brazas, Leyla Jael Castro, Nicola Fiore, Margareta Hellstrom, Emma Lazzeri, Ellen Leenarts, Paula Maria Martinez Lavanchy, Elizabeth Newbold, Amy Nurnberger, Esther Plomp, Lucia Vaira, Celia W G van Gelder, and Angus Whyte. Recommendations for a minimal metadata set to aid harmonised discovery of learning resources. June 2022. URL: https://doi.org/10.15497/RDA00073, doi:10.15497/RDA00073.\u00a0\u21a9</p> </li> </ol>"},{"location":"chapters/chapter_02/","title":"2. title of second chapter","text":""},{"location":"chapters/chapter_02/#21-first-subtopic","title":"2.1 First subtopic","text":"<p>Here you can enter text and if you need to cite1</p> <p>Challenge 1</p> <p>This is an example of text of Challenge 1</p> Solution <p>This is an example solution for Challenge 1.</p>"},{"location":"chapters/chapter_02/#22-second-subtopic","title":"2.2 Second subtopic","text":""},{"location":"chapters/chapter_02/#23-third-subtopic","title":"2.3 Third subtopic","text":"<ol> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.\u00a0\u21a9</p> </li> </ol>"},{"location":"chapters/chapter_03/","title":"3. An Introduction to Markdown","text":""},{"location":"chapters/chapter_03/#31-what-is-markdown","title":"3.1 What is Markdown?","text":"<p>Markdown is a simple markup language created by John Gruber in 2004. As a markup language, Markdown, allows you to format plain text to enhance presentation and readability of your text.  From a technical perspective, Markdown is two things: (i) a syntax or grammar for formatting plain text files and; (2) a software tool that converts plain text files to HTML. As a software Markdown is free and platform independent, meaning it can br run any device using any operating system.</p> <p>When using Markdown you annotate your text with chracters, such  as *s or #s, to achieve a desired formatting effect on that text (e.g. make a heading). In this sense it is different from WYSIWYG editors like Microsoft Word where you use buttons, keystrokes and mouse strokes to acheive a desired effect. Also, unlike WYSIWYG editors, you won\u2019t see the fruit of your formatting labours without an additional step of rendering your plain text file or notebook document into an HTML or other document format (these days some IDE\u2019s, e.g. the visual markdown editor in RStudio, support WYSIWYG rendering of Markdown in real time). </p>"},{"location":"chapters/chapter_03/#32-why-markdown-for-literate-programming","title":"3.2 Why Markdown for Literate Programming?","text":"<p>Recall that for literate programming, the narrative, rather than code, is the key focus, hence relevant and appropriate formatting of your text (e.g. using bold or italic font or incorporating images) is essential for other humans (perhaps your colleagues) to make sense of and engage with your code or analysis. Hence, literate programming involves mixing your code (written in Python,R etc.) with a document formatting or typesetting language to format your expositry narrative. HTML and LaTeX are two popular markup languages utilized for document formatting in literate programming for scientific research. However, unlike these other markup langguages, Markdown is simple and lightweight. This means you can focus on constructing engaging and efficient narrative without kicking a fuss over what code or tag is required to make your text appear, for e.g., in bold or italic font. Compared to other markup languages, you can learn Markdown quickly and hence focus more on your content writing.</p> <p>Figure 3.1 displays a comparison of the code require to format plain text into bold, italic or both in LaTex versus Markdown. From the code below it showed be obvious how the markdown syntax is much simpler than LaTeX (or indeed other markup languages). Additionally, withouth even rendering the markdown annotated text, it remains easily readable by humans. More complex formatting like generating tables, inserting images, requires even more complex code in markup languages like LaTex or HTML, but remains simple in Markdown as you will see in the next section. This simplicity of Markdown means there is little overhead in learning the document formatting language for literate programming, freeing your mind to focus on your content.</p>  Figure 3.1 Comparing markup syntax of Latex verus Markdown. Code for either markup language is highlighted in yellow. On rendering either document, the markedup text should display in bold, italics or both.  <p>Markdown\u2019s growing popularity as the document formatting language of choice in literate programming needs is reflected in the availability of markdown support (in many cases right out of the box without any additional installation!) for popular IDEs and notebook formats such as RStudio, VS Code, Jupyter Notebooksand even GitHub (a code hosting platform for colloboration and version control - if you are unfamiliar with GitHub, don\u2019t worry, this will be covered in a following course). </p> <p>Basic Markdown vs. Markdown Extensions</p> <p>Markdown\u2019s simplicity comes at a cost: there are only a limited amount of formatting effects available to you in basic or native Markdown. However, many applications supporting Markdown e.g. Jupyter Notebooks, R/RStudio, GitHub etc. provide thier own extensions of Markdown syntax which let you do more complex formatting with the simplicity of Markdown-like syntax. Additionally, if your needs ever grow, worry not, tools like pandoc allow you to mix more flexible formatting languages such as LaTeX and/or HTML with Markdown allowing you to format your text to  your heart\u2019s desire.</p>"},{"location":"chapters/chapter_03/#33-how-to-use-markdown","title":"3.3 How to use Markdown","text":"<p>It\u2019s time to get our hands dirty and start getting some practise in how to use Markdown to format our text. For the examples and exercises that follow, you will need to implement markdown in JupyterNotebooks.</p> <p>For JupyterNotebooks, you can create markdown cells to write formatted text in markdown:</p> <ol> <li>In your JupyterNotebook, select Markdown from the drop-down menu on the centre middle of the screen.</li> <li>Write your text and add your markdown formatting as you please within this cell.</li> <li>In Jupyter Notebooks, you will immediately see the markdown annotation and the resulting formatting on the screen. To see the formatting only, hit the <code>Run</code> button</li> </ol> <p></p>"},{"location":"chapters/chapter_03/#331-formatting-text","title":"3.3.1 Formatting text","text":"<p>You should have already seen examples of how to italicise or embolden you text (and both simulatenously) with markdown. There is other useful markdown sytnax for example for starting a new paragraph, use a blank like to seperate your paragraphs or if you want a monospaced font to represent <code>code</code> in your text, enclose the relevant code in single backticks:`\\`.</p> <p>Exercise</p> <p>Below is some text produced using markdown formatting. Use your preferred markdown editor, to write markdown annotated text, to achieve the following result:   </p> <p>The <code>mean()</code> function on <code>line 13</code> calcualtes the average of the vector.</p> <p>Make sure to render your markdown text to make sure it works like you think it should.</p> Solution <p><code>The `mean()` function on `line 13` calcualtes the **average** of the vector.</code></p> <p>As mentioned in Section 3.2, Markdown\u2019s simplicity comes at a cost. Not all formatting elements are natively represented in markdown. Depending on your application an extended syntax for Markdown may exist (e.g. Rmarkdown, which may offer a solution. In many cases HTML can help you acheive the desired result. Most applications rendering Markdown also support HTML. This does not mean you need to know HTML but you may have to rely on your googling or prompt engineering skills.</p> <p>Exercise</p> <p>There is no native support for sub- or superscripts in markdown, however HTML tags can do the trick. Use your technical sophistication (googling or otherwise) to write Markdown- (and HTML) formatted text text to achive the following result:  </p> <p>An example of a subscript is C02. An example of a superscript is 33=27.</p> <p>Make sure to rener your markdown text to make sure it works like you think it should.</p> Solution <p>An example of a subscript is C0<code>&lt;sub&gt;</code>2<code>&lt;/sub&gt;</code>. An example of a superscript is 3<code>&lt;sup&gt;</code>3<code>&lt;/sup&gt;</code>=27.</p> <p><code>&lt;sub&gt;&lt;/sub&gt;</code> and <code>&lt;sup&gt;&lt;/sup&gt;</code> are the HTML tags for subscripts and superscripts respectively. Some Makrdown editos also support encapsulating text in \\^ or \\~ for formattting superscript and subscript. respetively.</p>"},{"location":"chapters/chapter_03/#332-adding-headers","title":"3.3.2 Adding Headers","text":"<p>Your literate programming document needs to be divided into sections. Perhaps you sub-sections or sub-sub-sections? Markdown provides simple syntax for header formatting that provides 6 levels of headings to fullfill your sub-sectioning needs. To render headers using markdown all you need to do is start a line with a <code>#</code>, followed by a space and then your title, like so:</p> <p>Headers</p> Markdown:Rendered output: <p><code>#### My Excellent Title</code></p> <p>The number of <code>#</code> controls the size or level of the headers - more means smaller headers.</p> <p>Generating Headers of different size</p> <p>The following headers have been produced using Markdown. Can you reproduce them using Markdown-formatted text?</p>"},{"location":"chapters/chapter_03/#my-excellent-title","title":"My Excellent Title","text":""},{"location":"chapters/chapter_03/#my-smaller-section-title","title":"My smaller section title","text":""},{"location":"chapters/chapter_03/#this-is-my-other-header","title":"This is my other header","text":"Solution <p><code>#### My smaller section title</code></p> <p><code>##### This is my _other_ header</code></p>"},{"location":"chapters/chapter_03/#333-making-lists","title":"3.3.3 Making Lists","text":"<p>Every now and then, documentation of your code or analysis will need a list. Maybe it is a list of dependencies your colleague s need to run your code or perhaps it a list of genes you need to highlight in your latest gene expression anlaysi. It is easy to generate lists in Markdown. Basic Markdown supports ordered (i.e. numbered) or unordered lists.</p> <p>You can make ordered ordered lists by adding line items with numbers followed by periods. The numbers don\u2019t have to be in numerical order, but the list should start with the number one.</p> <p>Ordered lists</p> Markdown:Rendered output: <pre><code>1. first item\n2. second item\n3. third item\n</code></pre> <ol> <li>first item</li> <li>second tiem</li> <li>third item</li> </ol> <p>You can generate an unordered list, add dashes (-), asterisks (*), or plus signs (+) in front of line items.</p> <p>Unordered lists</p> Markdown:Rendered output: <pre><code>* first item\n* second item\n* third item\n</code></pre> <ul> <li>first item</li> <li>second tiem</li> <li>third item</li> </ul> <p>Making nested lists</p> <p>It is easy to generate nested lists in Markdown. Can you reproduce the following nested list using Markdown-formatted text?</p> <ol> <li>First item</li> <li>Second item</li> <li>Third item<ul> <li>Indented item A</li> <li>Indented item B</li> </ul> </li> <li>Fourth item</li> </ol> Solution <pre><code>1. First item\n2. Second item\n3. Third item\n     - Indented item A\n     - Indented item B\n4. Fourth item\n</code></pre>"},{"location":"chapters/chapter_03/#334-adding-images-and-links","title":"3.3.4 Adding Images and Links","text":"<p>Everynow and then you may need to provide a link in your literate document. You can provide links in basic Markdown in two ways. The first one we demonstrate are called _inline_links: here you provide the text of the link in square brackets ([ ]`) and the link itself follows in paranthesis.</p> <p>Inline links</p> Markdown:Rendered output: <pre><code>[Visit Elixir!](https://elixir-europe.org/)\n</code></pre> <p>Visit Elixir!</p> <p>The other type of link in basic Markdown is a reference link. In this case the link is to another place in your literate document itself, kind of almost like a citation. </p> <p>Reference links</p> Markdown:Rendered output: <pre><code>Want to do [Repdroducible Science?][link one].\nHere are some [practical guides][another-link]. \nDon't forget to read [this article][link one] in its entirety. \n\n\n[link one]: https://www.nature.com/articles/s41562-016-0021\n[another-link]: https://ziemann-lab.net/public/5pillars/practical_guides.html\n</code></pre> <p>Want to do Repdroducible Science?. Here are some practical guides.  Don\u2019t forget to read this article in its entirety. </p> <p>The \u201creferences\u201d above are the second set of brackets: link one and another-link. At the bottom of a Markdown document, these brackets are defined as proper with a colon and then links to outside websites. An advantage of the reference link style is that multiple links to the same place only need to be updated once, as you would expect from a citation management software e.g. (Zotero), but as you\u2019ll see later there are better ways to do citations using extended in Markdown. Also note the reference links (the one at the bottom) don\u2019t actually appear in the renderded markdown document above.</p> <p>Similar to links you can add images in two ways. Additionally images can be online urls or from your local computer (in which case you need to provide the path to the image on your local computer instead of the url). Similar to links, one way to displayimg images is called inline image link. To generate one if these you add an exclamation mark (!), followed by square brackets ([ ]) that can optional include alt text the image (to make your content more accessible for visually impaired readers) and then finally the link (or path) to the image in parenthesis.</p> <p>Inline image links</p> Markdown:Rendered output: <pre><code>![Two happy penguins taking a selfie together in a snowy landscape](https://github.com/allisonhorst/stats-illustrations/blob/main/julie-mine-quarto-keynote/quarto_share.png?raw=true)  \n\n\"Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine \u00c7etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\"\n</code></pre> <p>  \u201cArtwork from \u201cHello, Quarto\u201d keynote by Julia Lowndes and Mine \u00c7etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\u201d</p> <p>You can make reference image links very similar to how you would make inline links. Redoing the inline image link is a reference image link is left as an exercise for the reader. </p>"},{"location":"chapters/chapter_03/#335-making-tables","title":"3.3.5 Making Tables","text":"<p>At some point in your literate document, you may want to present information in a table. Although basic Markdown does not come with a syntax to make tables, almost all extensions now have a universal syntax to do so. </p> <p>To make a table, use three or more hyphens (\u2014) to create each column\u2019s header, and use pipes (|) to separate each column.</p> <p>Tables</p> Markdown:Rendered output: <p></p><pre><code>| Column 1    | Column 2    |\n| ----------- | ----------- |\n| blah        | blah        |\n| blah        | blah        |\n</code></pre> Note: the cell widths don\u2019t have to be fixed as above and can vary, yiedling the same output (try it yourself if you don\u2019t believe me)  Column 1 Column 2 blah blah blah blah <p>Making a two column table</p> <p>Can you write the Markdown-formatted text to generate the exact following table (don\u2019t forget the cell alginment)?</p> Gene p-value Gene A 0.1 Gene B 0.005 Gene C 0.01 Solution <pre><code>| Gene        | _p-value_ |\n| :----------:| :--------:|\n| Gene A      | 0.1  |\n| Gene B      | 0.005|\n| Gene C      | 0.01 |\n</code></pre> <p>Making tables in Markdown\u2026</p> <p>Making small tables is simple enough but making larger tables can get painful in markdown. If you need to make tables from your own data, R or Python will have appropriate extensions to help you with that. For other  larger tables in markdon the Markdown Tables Generator is a great tool. Make your table using their graphical interface and then copy the generated Markdown-  formatted text into your file.</p>"},{"location":"chapters/chapter_03/#336-paragraphs","title":"3.3.6 Paragraphs","text":"<p>Formatting paragrahs is simple but perhaps not as intuitive in Markdown. For example, consider the verse below (I got ChatGPT to wax poetic about the graces of Markdown):</p> <p>In the realm of code, where words and logic intertwine, There exists a tool, both simple and sublime. Markdown, the poet\u2019s brush, the programmer\u2019s aid, Unveils the advantages of a seamless cascade.  </p> <p>You may be tempted to think, that way you format a pargraph like this in Markdown would be like so:</p> <pre><code>In the realm of code, where words and logic intertwine,\nThere exists a tool, both simple and sublime.\nMarkdown, the poet's brush, the programmer's aid,\nUnveils the advantages of a seamless cascade.\n</code></pre> <p>Unfortunately, if you did this the whole verse would come in a single line! Not very fitting for a poem.</p> <p>To acheive the desired affect, you can enforce a hard break by inserting a new line between each line of the verse:</p> <p>Hard breaks for formatting</p> Markdown:Rendered output: <pre><code>In the realm of code, where words and logic intertwine,\n\nThere exists a tool, both simple and sublime.\n\nMarkdown, the poet's brush, the programmer's aid,\n\nUnveils the advantages of a seamless cascade.\n</code></pre> <p>In the realm of code, where words and logic intertwine,</p> <p>There exists a tool, both simple and sublime.</p> <p>Markdown, the poet\u2019s brush, the programmer\u2019s aid,</p> <p>Unveils the advantages of a seamless cascade.</p> <p>The hard break works but not the formatting is now disconnected between the Markdown document and the rendered output. A more subtle way to achieve this sort of paragraph formatting effect is to use what is called soft break. A soft break involves inserting two blank spaces with the Space key at the end of each line. A soft break acheives the same effect a a hard break but leaves more of a semblance between the text in the Markdown document and the final rendered document. which may be more desirable in several instances.</p> <p>Using soft breaks</p> <p>Here is the last verse from the ChatGP epic poem about the advanatges of Makrdown for literate progamming:</p> <p>So let markdown be your ally, your creative friend, In the realm of literate programming, where wonders never end. For within its simplicity lies a powerful tool, Unleashing the potential of both scholar and fool.  </p> <p>Use soft breaks in Markdown to recreate the formatted verse above.</p>"},{"location":"chapters/chapter_03/#34-summary","title":"3.4 Summary","text":"<ul> <li>Markdown is a simple language for formatting text.  </li> <li>Markdown is not the only tool for formatting text but it\u2019s easy to learn making it one of the most popular tools for various purposes including Literate Programming.  </li> <li>Markdown is supported by many of the popular IDEs including JupyterNotebooks  </li> <li>Although basic Markdown has limited functionality, many extensions, often language-specific, exist to enhance Markdown\u2019s capability.</li> </ul>"},{"location":"chapters/chapter_03/#35-further-learning-and-resources-for-markdown","title":"3.5 Further Learning and Resources for Markdown","text":"<p>The above should give you enough Markdown to get started and follow any later lessons. There are a handful os basic markdown elements that are covered in the Markdown Guide below and there are plenty of extensions as well.  If you want more, here is a very short selection of some resources that might be helpful:</p> <ul> <li>Markdown Guide offers a short and handy reference to the basic syntax or grammar of markdown.</li> <li>Want to practise some more markdown? Try this excellent, standalone Markdown tutorial. Some of the examples on this page are based on these lessons.</li> <li>A nifty cheatsheet for basic markdown can be handy.</li> <li>A cheatsheet for extended Markdown in Jupyter Notebooks going beyond basic Markdown.</li> </ul>"},{"location":"chapters/references/","title":"References","text":"<ol> <li> <p>Leyla Garcia, B\u00e9r\u00e9nice Batut, Melissa L. Burke, Mateusz Kuzak, Fotis Psomopoulos, Ricardo Arcila, Teresa K. Attwood, Niall Beard, Denise Carvalho-Silva, Alexandros C. Dimopoulos, Victoria Dominguez Del Angel, Michel Dumontier, Kim T. Gurwitz, Roland Krause, Peter McQuilton, Loredana Le Pera, Sarah L. Morgan, P\u00e4ivi Rauste, Allegra Via, Pascal Kahlem, Gabriella Rustici, Celia W.G. Van Gelder, and Patricia M. Palagi. Ten simple rules for making training materials FAIR. PLoS Computational Biology, 16(5):1\u20139, 2020. doi:10.1371/journal.pcbi.1007854.\u00a0\u21a9</p> </li> <li> <p>Nancy J Hoebelheinrich, Katarzyna Biernacka, Michelle Brazas, Leyla Jael Castro, Nicola Fiore, Margareta Hellstrom, Emma Lazzeri, Ellen Leenarts, Paula Maria Martinez Lavanchy, Elizabeth Newbold, Amy Nurnberger, Esther Plomp, Lucia Vaira, Celia W G van Gelder, and Angus Whyte. Recommendations for a minimal metadata set to aid harmonised discovery of learning resources. June 2022. URL: https://doi.org/10.15497/RDA00073, doi:10.15497/RDA00073.\u00a0\u21a9</p> </li> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.\u00a0\u21a9</p> </li> </ol>"},{"location":"keywords/","title":"Keywords","text":"<p>Here\u2019s a lit of used keywords:</p> <ol> <li> <p>Leyla Garcia, B\u00e9r\u00e9nice Batut, Melissa L. Burke, Mateusz Kuzak, Fotis Psomopoulos, Ricardo Arcila, Teresa K. Attwood, Niall Beard, Denise Carvalho-Silva, Alexandros C. Dimopoulos, Victoria Dominguez Del Angel, Michel Dumontier, Kim T. Gurwitz, Roland Krause, Peter McQuilton, Loredana Le Pera, Sarah L. Morgan, P\u00e4ivi Rauste, Allegra Via, Pascal Kahlem, Gabriella Rustici, Celia W.G. Van Gelder, and Patricia M. Palagi. Ten simple rules for making training materials FAIR. PLoS Computational Biology, 16(5):1\u20139, 2020. doi:10.1371/journal.pcbi.1007854.\u00a0\u21a9</p> </li> <li> <p>Nancy J Hoebelheinrich, Katarzyna Biernacka, Michelle Brazas, Leyla Jael Castro, Nicola Fiore, Margareta Hellstrom, Emma Lazzeri, Ellen Leenarts, Paula Maria Martinez Lavanchy, Elizabeth Newbold, Amy Nurnberger, Esther Plomp, Lucia Vaira, Celia W G van Gelder, and Angus Whyte. Recommendations for a minimal metadata set to aid harmonised discovery of learning resources. June 2022. URL: https://doi.org/10.15497/RDA00073, doi:10.15497/RDA00073.\u00a0\u21a9</p> </li> <li> <p>When we share, everyone wins. Accessed: 2022-08-11. URL: https://creativecommons.org/.mkdocs\u00a0\u21a9</p> </li> </ol>"}]}